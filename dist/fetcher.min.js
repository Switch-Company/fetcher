/**
 * @switch-company/fetcher - Wrap the Fetch API with convinience methods.
 * @version v1.0.0
 * @link undefined
 * @license ISC
 **/
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.fetcher=e()}(this,function(){"use strict";var t={headers:{"X-Requested-With":"XMLHttpRequest"},options:{credentials:"same-origin"},timeout:3e4};function e(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(n=Object.assign({},t.params,n)).headers||(n.headers={}),n.headers=Object.assign({},t.headers,n.headers),new Promise(function(r,o){var a=function(){o({status:599,statusText:"Network Connect Timeout Error"})},i=window.setTimeout(a,t.timeout);window.fetch(e,n).then(function(t){r(t)}).catch(a).then(function(){window.clearTimeout(i)})}).then(function(t){return function(t){var e=t.headers.get("content-type");if(e.includes("application/json"))return t.json().then(function(e){return t.ok?e:Promise.reject(e)});if(e.includes("multipart/form-data"))return t.formData().then(function(e){return t.ok?e:Promise.reject(e)});if(e.includes("application/octet-stream"))return t.blob().then(function(e){return t.ok?e:Promise.reject(e)});if(t.ok)return t.text();return Promise.reject({status:t.status,statusText:t.statusText})}(t)})}var n=window.encodeURIComponent;function r(t){return Object.keys(t).map(function(e){return Array.isArray(t[e])?t[e].map(function(t){return n(e)+"="+n(t)}).join("&"):n(e)+"="+n(t[e])}).join("&")}function o(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(n.method="get",n.data)&&(t+=t.split["?"][1]?"&"+r(n.data):"?"+r(n.data),delete n.data);return e(t,n)}function a(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.header&&"multipart/form-data"===n.header["Content-Type"];return(n=Object.assign({},{method:"post"},n)).data||(n.data={}),n.body=r?n.data:JSON.stringify(n.data),delete n.data,e(t,n)}function i(t,e=!1){const n=new FormData(t),r={};for(let[t,o]of n)if(!(e&&"string"!=typeof o||"File"===o.constructor.name&&0===o.size))if(r[t]){if(Array.isArray(r[t])){r[t].push(o);continue}r[t]=[r[t],o]}else r[t]=o;return r}const s=window.encodeURIComponent;var u={toJSON:i,toQuery:function(t){const e=i(t,!0);return Object.keys(e).map(t=>Array.isArray(e[t])?e[t].map(e=>`${s(t)}=${s(e)}`).join("&"):`${s(t)}=${s(e[t])}`).join("&")},hasFile:function(t){return Array.from(t.elements).some(t=>"file"===t.type&&t.files.length>0)}};return{get:o,post:a,form:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=a;return e.method||(t.method=t.method),"get"===e.method&&(n=o),u.hasFile?(e.header||(e.header={}),e.header["Content-Type"]="multipart/form-data",e.data=new FormData(t)):e.data=u.toJSON(t),n(t.action,e)},config:t}});
